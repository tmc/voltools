// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testCongressionalDistricts(t *testing.T) {
	t.Parallel()

	query := CongressionalDistricts()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testCongressionalDistrictsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CongressionalDistrict{}
	if err = randomize.Struct(seed, o, congressionalDistrictDBTypes, true, congressionalDistrictColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CongressionalDistrict struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := CongressionalDistricts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCongressionalDistrictsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CongressionalDistrict{}
	if err = randomize.Struct(seed, o, congressionalDistrictDBTypes, true, congressionalDistrictColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CongressionalDistrict struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := CongressionalDistricts().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := CongressionalDistricts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCongressionalDistrictsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CongressionalDistrict{}
	if err = randomize.Struct(seed, o, congressionalDistrictDBTypes, true, congressionalDistrictColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CongressionalDistrict struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := CongressionalDistrictSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := CongressionalDistricts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCongressionalDistrictsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CongressionalDistrict{}
	if err = randomize.Struct(seed, o, congressionalDistrictDBTypes, true, congressionalDistrictColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CongressionalDistrict struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := CongressionalDistrictExists(ctx, tx, o.Gid)
	if err != nil {
		t.Errorf("Unable to check if CongressionalDistrict exists: %s", err)
	}
	if !e {
		t.Errorf("Expected CongressionalDistrictExists to return true, but got false.")
	}
}

func testCongressionalDistrictsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CongressionalDistrict{}
	if err = randomize.Struct(seed, o, congressionalDistrictDBTypes, true, congressionalDistrictColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CongressionalDistrict struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	congressionalDistrictFound, err := FindCongressionalDistrict(ctx, tx, o.Gid)
	if err != nil {
		t.Error(err)
	}

	if congressionalDistrictFound == nil {
		t.Error("want a record, got nil")
	}
}

func testCongressionalDistrictsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CongressionalDistrict{}
	if err = randomize.Struct(seed, o, congressionalDistrictDBTypes, true, congressionalDistrictColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CongressionalDistrict struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = CongressionalDistricts().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testCongressionalDistrictsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CongressionalDistrict{}
	if err = randomize.Struct(seed, o, congressionalDistrictDBTypes, true, congressionalDistrictColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CongressionalDistrict struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := CongressionalDistricts().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testCongressionalDistrictsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	congressionalDistrictOne := &CongressionalDistrict{}
	congressionalDistrictTwo := &CongressionalDistrict{}
	if err = randomize.Struct(seed, congressionalDistrictOne, congressionalDistrictDBTypes, false, congressionalDistrictColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CongressionalDistrict struct: %s", err)
	}
	if err = randomize.Struct(seed, congressionalDistrictTwo, congressionalDistrictDBTypes, false, congressionalDistrictColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CongressionalDistrict struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = congressionalDistrictOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = congressionalDistrictTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := CongressionalDistricts().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testCongressionalDistrictsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	congressionalDistrictOne := &CongressionalDistrict{}
	congressionalDistrictTwo := &CongressionalDistrict{}
	if err = randomize.Struct(seed, congressionalDistrictOne, congressionalDistrictDBTypes, false, congressionalDistrictColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CongressionalDistrict struct: %s", err)
	}
	if err = randomize.Struct(seed, congressionalDistrictTwo, congressionalDistrictDBTypes, false, congressionalDistrictColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CongressionalDistrict struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = congressionalDistrictOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = congressionalDistrictTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CongressionalDistricts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func congressionalDistrictBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *CongressionalDistrict) error {
	*o = CongressionalDistrict{}
	return nil
}

func congressionalDistrictAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *CongressionalDistrict) error {
	*o = CongressionalDistrict{}
	return nil
}

func congressionalDistrictAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *CongressionalDistrict) error {
	*o = CongressionalDistrict{}
	return nil
}

func congressionalDistrictBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *CongressionalDistrict) error {
	*o = CongressionalDistrict{}
	return nil
}

func congressionalDistrictAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *CongressionalDistrict) error {
	*o = CongressionalDistrict{}
	return nil
}

func congressionalDistrictBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *CongressionalDistrict) error {
	*o = CongressionalDistrict{}
	return nil
}

func congressionalDistrictAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *CongressionalDistrict) error {
	*o = CongressionalDistrict{}
	return nil
}

func congressionalDistrictBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *CongressionalDistrict) error {
	*o = CongressionalDistrict{}
	return nil
}

func congressionalDistrictAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *CongressionalDistrict) error {
	*o = CongressionalDistrict{}
	return nil
}

func testCongressionalDistrictsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &CongressionalDistrict{}
	o := &CongressionalDistrict{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, congressionalDistrictDBTypes, false); err != nil {
		t.Errorf("Unable to randomize CongressionalDistrict object: %s", err)
	}

	AddCongressionalDistrictHook(boil.BeforeInsertHook, congressionalDistrictBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	congressionalDistrictBeforeInsertHooks = []CongressionalDistrictHook{}

	AddCongressionalDistrictHook(boil.AfterInsertHook, congressionalDistrictAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	congressionalDistrictAfterInsertHooks = []CongressionalDistrictHook{}

	AddCongressionalDistrictHook(boil.AfterSelectHook, congressionalDistrictAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	congressionalDistrictAfterSelectHooks = []CongressionalDistrictHook{}

	AddCongressionalDistrictHook(boil.BeforeUpdateHook, congressionalDistrictBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	congressionalDistrictBeforeUpdateHooks = []CongressionalDistrictHook{}

	AddCongressionalDistrictHook(boil.AfterUpdateHook, congressionalDistrictAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	congressionalDistrictAfterUpdateHooks = []CongressionalDistrictHook{}

	AddCongressionalDistrictHook(boil.BeforeDeleteHook, congressionalDistrictBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	congressionalDistrictBeforeDeleteHooks = []CongressionalDistrictHook{}

	AddCongressionalDistrictHook(boil.AfterDeleteHook, congressionalDistrictAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	congressionalDistrictAfterDeleteHooks = []CongressionalDistrictHook{}

	AddCongressionalDistrictHook(boil.BeforeUpsertHook, congressionalDistrictBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	congressionalDistrictBeforeUpsertHooks = []CongressionalDistrictHook{}

	AddCongressionalDistrictHook(boil.AfterUpsertHook, congressionalDistrictAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	congressionalDistrictAfterUpsertHooks = []CongressionalDistrictHook{}
}

func testCongressionalDistrictsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CongressionalDistrict{}
	if err = randomize.Struct(seed, o, congressionalDistrictDBTypes, true, congressionalDistrictColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CongressionalDistrict struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CongressionalDistricts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCongressionalDistrictsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CongressionalDistrict{}
	if err = randomize.Struct(seed, o, congressionalDistrictDBTypes, true); err != nil {
		t.Errorf("Unable to randomize CongressionalDistrict struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(congressionalDistrictColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := CongressionalDistricts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCongressionalDistrictsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CongressionalDistrict{}
	if err = randomize.Struct(seed, o, congressionalDistrictDBTypes, true, congressionalDistrictColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CongressionalDistrict struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testCongressionalDistrictsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CongressionalDistrict{}
	if err = randomize.Struct(seed, o, congressionalDistrictDBTypes, true, congressionalDistrictColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CongressionalDistrict struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := CongressionalDistrictSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testCongressionalDistrictsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CongressionalDistrict{}
	if err = randomize.Struct(seed, o, congressionalDistrictDBTypes, true, congressionalDistrictColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CongressionalDistrict struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := CongressionalDistricts().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	congressionalDistrictDBTypes = map[string]string{`Gid`: `integer`, `Statefp`: `character varying`, `CD116FP`: `character varying`, `Geoid`: `character varying`, `Name`: `character varying`, `Lsad`: `character varying`, `Cdsessn`: `character varying`, `MTFCC`: `character varying`, `Funcstat`: `character varying`, `Aland`: `double precision`, `Awater`: `double precision`, `Intptlat`: `character varying`, `Intptlon`: `character varying`}
	_                            = bytes.MinRead
)

func testCongressionalDistrictsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(congressionalDistrictPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(congressionalDistrictAllColumns) == len(congressionalDistrictPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &CongressionalDistrict{}
	if err = randomize.Struct(seed, o, congressionalDistrictDBTypes, true, congressionalDistrictColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CongressionalDistrict struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CongressionalDistricts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, congressionalDistrictDBTypes, true, congressionalDistrictPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize CongressionalDistrict struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testCongressionalDistrictsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(congressionalDistrictAllColumns) == len(congressionalDistrictPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &CongressionalDistrict{}
	if err = randomize.Struct(seed, o, congressionalDistrictDBTypes, true, congressionalDistrictColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CongressionalDistrict struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CongressionalDistricts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, congressionalDistrictDBTypes, true, congressionalDistrictPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize CongressionalDistrict struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(congressionalDistrictAllColumns, congressionalDistrictPrimaryKeyColumns) {
		fields = congressionalDistrictAllColumns
	} else {
		fields = strmangle.SetComplement(
			congressionalDistrictAllColumns,
			congressionalDistrictPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := CongressionalDistrictSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testCongressionalDistrictsUpsert(t *testing.T) {
	t.Parallel()

	if len(congressionalDistrictAllColumns) == len(congressionalDistrictPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := CongressionalDistrict{}
	if err = randomize.Struct(seed, &o, congressionalDistrictDBTypes, true); err != nil {
		t.Errorf("Unable to randomize CongressionalDistrict struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert CongressionalDistrict: %s", err)
	}

	count, err := CongressionalDistricts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, congressionalDistrictDBTypes, false, congressionalDistrictPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize CongressionalDistrict struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert CongressionalDistrict: %s", err)
	}

	count, err = CongressionalDistricts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
