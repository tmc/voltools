// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ZipCode is an object representing the database table.
type ZipCode struct {
	Gid        int          `boil:"gid" json:"gid" toml:"gid" yaml:"gid"`
	ZipCode    null.String  `boil:"zcta5ce10" json:"zcta5ce10,omitempty" toml:"zcta5ce10" yaml:"zcta5ce10,omitempty"`
	Geoid10    string       `boil:"geoid10" json:"geoid10" toml:"geoid10" yaml:"geoid10"`
	Classfp10  null.String  `boil:"classfp10" json:"classfp10,omitempty" toml:"classfp10" yaml:"classfp10,omitempty"`
	MTFCC10    null.String  `boil:"mtfcc10" json:"mtfcc10,omitempty" toml:"mtfcc10" yaml:"mtfcc10,omitempty"`
	Funcstat10 null.String  `boil:"funcstat10" json:"funcstat10,omitempty" toml:"funcstat10" yaml:"funcstat10,omitempty"`
	Aland10    null.Float64 `boil:"aland10" json:"aland10,omitempty" toml:"aland10" yaml:"aland10,omitempty"`
	Awater10   null.Float64 `boil:"awater10" json:"awater10,omitempty" toml:"awater10" yaml:"awater10,omitempty"`
	Intptlat10 null.String  `boil:"intptlat10" json:"intptlat10,omitempty" toml:"intptlat10" yaml:"intptlat10,omitempty"`
	Intptlon10 null.String  `boil:"intptlon10" json:"intptlon10,omitempty" toml:"intptlon10" yaml:"intptlon10,omitempty"`

	R *zipCodeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L zipCodeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ZipCodeColumns = struct {
	Gid        string
	ZipCode    string
	Geoid10    string
	Classfp10  string
	MTFCC10    string
	Funcstat10 string
	Aland10    string
	Awater10   string
	Intptlat10 string
	Intptlon10 string
}{
	Gid:        "gid",
	ZipCode:    "zcta5ce10",
	Geoid10:    "geoid10",
	Classfp10:  "classfp10",
	MTFCC10:    "mtfcc10",
	Funcstat10: "funcstat10",
	Aland10:    "aland10",
	Awater10:   "awater10",
	Intptlat10: "intptlat10",
	Intptlon10: "intptlon10",
}

// Generated where

var ZipCodeWhere = struct {
	Gid        whereHelperint
	ZipCode    whereHelpernull_String
	Geoid10    whereHelperstring
	Classfp10  whereHelpernull_String
	MTFCC10    whereHelpernull_String
	Funcstat10 whereHelpernull_String
	Aland10    whereHelpernull_Float64
	Awater10   whereHelpernull_Float64
	Intptlat10 whereHelpernull_String
	Intptlon10 whereHelpernull_String
}{
	Gid:        whereHelperint{field: "\"zip_codes\".\"gid\""},
	ZipCode:    whereHelpernull_String{field: "\"zip_codes\".\"zcta5ce10\""},
	Geoid10:    whereHelperstring{field: "\"zip_codes\".\"geoid10\""},
	Classfp10:  whereHelpernull_String{field: "\"zip_codes\".\"classfp10\""},
	MTFCC10:    whereHelpernull_String{field: "\"zip_codes\".\"mtfcc10\""},
	Funcstat10: whereHelpernull_String{field: "\"zip_codes\".\"funcstat10\""},
	Aland10:    whereHelpernull_Float64{field: "\"zip_codes\".\"aland10\""},
	Awater10:   whereHelpernull_Float64{field: "\"zip_codes\".\"awater10\""},
	Intptlat10: whereHelpernull_String{field: "\"zip_codes\".\"intptlat10\""},
	Intptlon10: whereHelpernull_String{field: "\"zip_codes\".\"intptlon10\""},
}

// ZipCodeRels is where relationship names are stored.
var ZipCodeRels = struct {
}{}

// zipCodeR is where relationships are stored.
type zipCodeR struct {
}

// NewStruct creates a new relationship struct
func (*zipCodeR) NewStruct() *zipCodeR {
	return &zipCodeR{}
}

// zipCodeL is where Load methods for each relationship are stored.
type zipCodeL struct{}

var (
	zipCodeAllColumns            = []string{"gid", "zcta5ce10", "geoid10", "classfp10", "mtfcc10", "funcstat10", "aland10", "awater10", "intptlat10", "intptlon10"}
	zipCodeColumnsWithoutDefault = []string{"zcta5ce10", "geoid10", "classfp10", "mtfcc10", "funcstat10", "aland10", "awater10", "intptlat10", "intptlon10"}
	zipCodeColumnsWithDefault    = []string{"gid"}
	zipCodePrimaryKeyColumns     = []string{"geoid10"}
)

type (
	// ZipCodeSlice is an alias for a slice of pointers to ZipCode.
	// This should generally be used opposed to []ZipCode.
	ZipCodeSlice []*ZipCode
	// ZipCodeHook is the signature for custom ZipCode hook methods
	ZipCodeHook func(context.Context, boil.ContextExecutor, *ZipCode) error

	zipCodeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	zipCodeType                 = reflect.TypeOf(&ZipCode{})
	zipCodeMapping              = queries.MakeStructMapping(zipCodeType)
	zipCodePrimaryKeyMapping, _ = queries.BindMapping(zipCodeType, zipCodeMapping, zipCodePrimaryKeyColumns)
	zipCodeInsertCacheMut       sync.RWMutex
	zipCodeInsertCache          = make(map[string]insertCache)
	zipCodeUpdateCacheMut       sync.RWMutex
	zipCodeUpdateCache          = make(map[string]updateCache)
	zipCodeUpsertCacheMut       sync.RWMutex
	zipCodeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var zipCodeBeforeInsertHooks []ZipCodeHook
var zipCodeBeforeUpdateHooks []ZipCodeHook
var zipCodeBeforeDeleteHooks []ZipCodeHook
var zipCodeBeforeUpsertHooks []ZipCodeHook

var zipCodeAfterInsertHooks []ZipCodeHook
var zipCodeAfterSelectHooks []ZipCodeHook
var zipCodeAfterUpdateHooks []ZipCodeHook
var zipCodeAfterDeleteHooks []ZipCodeHook
var zipCodeAfterUpsertHooks []ZipCodeHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ZipCode) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range zipCodeBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ZipCode) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range zipCodeBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ZipCode) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range zipCodeBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ZipCode) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range zipCodeBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ZipCode) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range zipCodeAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ZipCode) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range zipCodeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ZipCode) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range zipCodeAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ZipCode) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range zipCodeAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ZipCode) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range zipCodeAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddZipCodeHook registers your hook function for all future operations.
func AddZipCodeHook(hookPoint boil.HookPoint, zipCodeHook ZipCodeHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		zipCodeBeforeInsertHooks = append(zipCodeBeforeInsertHooks, zipCodeHook)
	case boil.BeforeUpdateHook:
		zipCodeBeforeUpdateHooks = append(zipCodeBeforeUpdateHooks, zipCodeHook)
	case boil.BeforeDeleteHook:
		zipCodeBeforeDeleteHooks = append(zipCodeBeforeDeleteHooks, zipCodeHook)
	case boil.BeforeUpsertHook:
		zipCodeBeforeUpsertHooks = append(zipCodeBeforeUpsertHooks, zipCodeHook)
	case boil.AfterInsertHook:
		zipCodeAfterInsertHooks = append(zipCodeAfterInsertHooks, zipCodeHook)
	case boil.AfterSelectHook:
		zipCodeAfterSelectHooks = append(zipCodeAfterSelectHooks, zipCodeHook)
	case boil.AfterUpdateHook:
		zipCodeAfterUpdateHooks = append(zipCodeAfterUpdateHooks, zipCodeHook)
	case boil.AfterDeleteHook:
		zipCodeAfterDeleteHooks = append(zipCodeAfterDeleteHooks, zipCodeHook)
	case boil.AfterUpsertHook:
		zipCodeAfterUpsertHooks = append(zipCodeAfterUpsertHooks, zipCodeHook)
	}
}

// One returns a single zipCode record from the query.
func (q zipCodeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ZipCode, error) {
	o := &ZipCode{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for zip_codes")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ZipCode records from the query.
func (q zipCodeQuery) All(ctx context.Context, exec boil.ContextExecutor) (ZipCodeSlice, error) {
	var o []*ZipCode

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ZipCode slice")
	}

	if len(zipCodeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ZipCode records in the query.
func (q zipCodeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count zip_codes rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q zipCodeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if zip_codes exists")
	}

	return count > 0, nil
}

// ZipCodes retrieves all the records using an executor.
func ZipCodes(mods ...qm.QueryMod) zipCodeQuery {
	mods = append(mods, qm.From("\"zip_codes\""))
	return zipCodeQuery{NewQuery(mods...)}
}

// FindZipCode retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindZipCode(ctx context.Context, exec boil.ContextExecutor, geoid10 string, selectCols ...string) (*ZipCode, error) {
	zipCodeObj := &ZipCode{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"zip_codes\" where \"geoid10\"=$1", sel,
	)

	q := queries.Raw(query, geoid10)

	err := q.Bind(ctx, exec, zipCodeObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from zip_codes")
	}

	return zipCodeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ZipCode) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no zip_codes provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(zipCodeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	zipCodeInsertCacheMut.RLock()
	cache, cached := zipCodeInsertCache[key]
	zipCodeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			zipCodeAllColumns,
			zipCodeColumnsWithDefault,
			zipCodeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(zipCodeType, zipCodeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(zipCodeType, zipCodeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"zip_codes\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"zip_codes\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into zip_codes")
	}

	if !cached {
		zipCodeInsertCacheMut.Lock()
		zipCodeInsertCache[key] = cache
		zipCodeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ZipCode.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ZipCode) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	zipCodeUpdateCacheMut.RLock()
	cache, cached := zipCodeUpdateCache[key]
	zipCodeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			zipCodeAllColumns,
			zipCodePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update zip_codes, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"zip_codes\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, zipCodePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(zipCodeType, zipCodeMapping, append(wl, zipCodePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update zip_codes row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for zip_codes")
	}

	if !cached {
		zipCodeUpdateCacheMut.Lock()
		zipCodeUpdateCache[key] = cache
		zipCodeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q zipCodeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for zip_codes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for zip_codes")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ZipCodeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), zipCodePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"zip_codes\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, zipCodePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in zipCode slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all zipCode")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ZipCode) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no zip_codes provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(zipCodeColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	zipCodeUpsertCacheMut.RLock()
	cache, cached := zipCodeUpsertCache[key]
	zipCodeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			zipCodeAllColumns,
			zipCodeColumnsWithDefault,
			zipCodeColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			zipCodeAllColumns,
			zipCodePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert zip_codes, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(zipCodePrimaryKeyColumns))
			copy(conflict, zipCodePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"zip_codes\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(zipCodeType, zipCodeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(zipCodeType, zipCodeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert zip_codes")
	}

	if !cached {
		zipCodeUpsertCacheMut.Lock()
		zipCodeUpsertCache[key] = cache
		zipCodeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ZipCode record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ZipCode) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ZipCode provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), zipCodePrimaryKeyMapping)
	sql := "DELETE FROM \"zip_codes\" WHERE \"geoid10\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from zip_codes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for zip_codes")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q zipCodeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no zipCodeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from zip_codes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for zip_codes")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ZipCodeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(zipCodeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), zipCodePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"zip_codes\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, zipCodePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from zipCode slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for zip_codes")
	}

	if len(zipCodeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ZipCode) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindZipCode(ctx, exec, o.Geoid10)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ZipCodeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ZipCodeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), zipCodePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"zip_codes\".* FROM \"zip_codes\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, zipCodePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ZipCodeSlice")
	}

	*o = slice

	return nil
}

// ZipCodeExists checks if the ZipCode row exists.
func ZipCodeExists(ctx context.Context, exec boil.ContextExecutor, geoid10 string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"zip_codes\" where \"geoid10\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, geoid10)
	}
	row := exec.QueryRowContext(ctx, sql, geoid10)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if zip_codes exists")
	}

	return exists, nil
}
