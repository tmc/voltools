// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// StateFipsCode is an object representing the database table.
type StateFipsCode struct {
	Name         null.String `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`
	Abbreviation null.String `boil:"abbreviation" json:"abbreviation,omitempty" toml:"abbreviation" yaml:"abbreviation,omitempty"`
	Code         string      `boil:"code" json:"code" toml:"code" yaml:"code"`

	R *stateFipsCodeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L stateFipsCodeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var StateFipsCodeColumns = struct {
	Name         string
	Abbreviation string
	Code         string
}{
	Name:         "name",
	Abbreviation: "abbreviation",
	Code:         "code",
}

// Generated where

var StateFipsCodeWhere = struct {
	Name         whereHelpernull_String
	Abbreviation whereHelpernull_String
	Code         whereHelperstring
}{
	Name:         whereHelpernull_String{field: "\"state_fips_codes\".\"name\""},
	Abbreviation: whereHelpernull_String{field: "\"state_fips_codes\".\"abbreviation\""},
	Code:         whereHelperstring{field: "\"state_fips_codes\".\"code\""},
}

// StateFipsCodeRels is where relationship names are stored.
var StateFipsCodeRels = struct {
}{}

// stateFipsCodeR is where relationships are stored.
type stateFipsCodeR struct {
}

// NewStruct creates a new relationship struct
func (*stateFipsCodeR) NewStruct() *stateFipsCodeR {
	return &stateFipsCodeR{}
}

// stateFipsCodeL is where Load methods for each relationship are stored.
type stateFipsCodeL struct{}

var (
	stateFipsCodeAllColumns            = []string{"name", "abbreviation", "code"}
	stateFipsCodeColumnsWithoutDefault = []string{"name", "abbreviation", "code"}
	stateFipsCodeColumnsWithDefault    = []string{}
	stateFipsCodePrimaryKeyColumns     = []string{"code"}
)

type (
	// StateFipsCodeSlice is an alias for a slice of pointers to StateFipsCode.
	// This should generally be used opposed to []StateFipsCode.
	StateFipsCodeSlice []*StateFipsCode
	// StateFipsCodeHook is the signature for custom StateFipsCode hook methods
	StateFipsCodeHook func(context.Context, boil.ContextExecutor, *StateFipsCode) error

	stateFipsCodeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	stateFipsCodeType                 = reflect.TypeOf(&StateFipsCode{})
	stateFipsCodeMapping              = queries.MakeStructMapping(stateFipsCodeType)
	stateFipsCodePrimaryKeyMapping, _ = queries.BindMapping(stateFipsCodeType, stateFipsCodeMapping, stateFipsCodePrimaryKeyColumns)
	stateFipsCodeInsertCacheMut       sync.RWMutex
	stateFipsCodeInsertCache          = make(map[string]insertCache)
	stateFipsCodeUpdateCacheMut       sync.RWMutex
	stateFipsCodeUpdateCache          = make(map[string]updateCache)
	stateFipsCodeUpsertCacheMut       sync.RWMutex
	stateFipsCodeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var stateFipsCodeBeforeInsertHooks []StateFipsCodeHook
var stateFipsCodeBeforeUpdateHooks []StateFipsCodeHook
var stateFipsCodeBeforeDeleteHooks []StateFipsCodeHook
var stateFipsCodeBeforeUpsertHooks []StateFipsCodeHook

var stateFipsCodeAfterInsertHooks []StateFipsCodeHook
var stateFipsCodeAfterSelectHooks []StateFipsCodeHook
var stateFipsCodeAfterUpdateHooks []StateFipsCodeHook
var stateFipsCodeAfterDeleteHooks []StateFipsCodeHook
var stateFipsCodeAfterUpsertHooks []StateFipsCodeHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *StateFipsCode) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range stateFipsCodeBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *StateFipsCode) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range stateFipsCodeBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *StateFipsCode) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range stateFipsCodeBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *StateFipsCode) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range stateFipsCodeBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *StateFipsCode) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range stateFipsCodeAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *StateFipsCode) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range stateFipsCodeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *StateFipsCode) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range stateFipsCodeAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *StateFipsCode) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range stateFipsCodeAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *StateFipsCode) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range stateFipsCodeAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddStateFipsCodeHook registers your hook function for all future operations.
func AddStateFipsCodeHook(hookPoint boil.HookPoint, stateFipsCodeHook StateFipsCodeHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		stateFipsCodeBeforeInsertHooks = append(stateFipsCodeBeforeInsertHooks, stateFipsCodeHook)
	case boil.BeforeUpdateHook:
		stateFipsCodeBeforeUpdateHooks = append(stateFipsCodeBeforeUpdateHooks, stateFipsCodeHook)
	case boil.BeforeDeleteHook:
		stateFipsCodeBeforeDeleteHooks = append(stateFipsCodeBeforeDeleteHooks, stateFipsCodeHook)
	case boil.BeforeUpsertHook:
		stateFipsCodeBeforeUpsertHooks = append(stateFipsCodeBeforeUpsertHooks, stateFipsCodeHook)
	case boil.AfterInsertHook:
		stateFipsCodeAfterInsertHooks = append(stateFipsCodeAfterInsertHooks, stateFipsCodeHook)
	case boil.AfterSelectHook:
		stateFipsCodeAfterSelectHooks = append(stateFipsCodeAfterSelectHooks, stateFipsCodeHook)
	case boil.AfterUpdateHook:
		stateFipsCodeAfterUpdateHooks = append(stateFipsCodeAfterUpdateHooks, stateFipsCodeHook)
	case boil.AfterDeleteHook:
		stateFipsCodeAfterDeleteHooks = append(stateFipsCodeAfterDeleteHooks, stateFipsCodeHook)
	case boil.AfterUpsertHook:
		stateFipsCodeAfterUpsertHooks = append(stateFipsCodeAfterUpsertHooks, stateFipsCodeHook)
	}
}

// One returns a single stateFipsCode record from the query.
func (q stateFipsCodeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*StateFipsCode, error) {
	o := &StateFipsCode{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for state_fips_codes")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all StateFipsCode records from the query.
func (q stateFipsCodeQuery) All(ctx context.Context, exec boil.ContextExecutor) (StateFipsCodeSlice, error) {
	var o []*StateFipsCode

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to StateFipsCode slice")
	}

	if len(stateFipsCodeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all StateFipsCode records in the query.
func (q stateFipsCodeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count state_fips_codes rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q stateFipsCodeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if state_fips_codes exists")
	}

	return count > 0, nil
}

// StateFipsCodes retrieves all the records using an executor.
func StateFipsCodes(mods ...qm.QueryMod) stateFipsCodeQuery {
	mods = append(mods, qm.From("\"state_fips_codes\""))
	return stateFipsCodeQuery{NewQuery(mods...)}
}

// FindStateFipsCode retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindStateFipsCode(ctx context.Context, exec boil.ContextExecutor, code string, selectCols ...string) (*StateFipsCode, error) {
	stateFipsCodeObj := &StateFipsCode{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"state_fips_codes\" where \"code\"=$1", sel,
	)

	q := queries.Raw(query, code)

	err := q.Bind(ctx, exec, stateFipsCodeObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from state_fips_codes")
	}

	return stateFipsCodeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *StateFipsCode) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no state_fips_codes provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(stateFipsCodeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	stateFipsCodeInsertCacheMut.RLock()
	cache, cached := stateFipsCodeInsertCache[key]
	stateFipsCodeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			stateFipsCodeAllColumns,
			stateFipsCodeColumnsWithDefault,
			stateFipsCodeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(stateFipsCodeType, stateFipsCodeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(stateFipsCodeType, stateFipsCodeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"state_fips_codes\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"state_fips_codes\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into state_fips_codes")
	}

	if !cached {
		stateFipsCodeInsertCacheMut.Lock()
		stateFipsCodeInsertCache[key] = cache
		stateFipsCodeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the StateFipsCode.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *StateFipsCode) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	stateFipsCodeUpdateCacheMut.RLock()
	cache, cached := stateFipsCodeUpdateCache[key]
	stateFipsCodeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			stateFipsCodeAllColumns,
			stateFipsCodePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update state_fips_codes, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"state_fips_codes\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, stateFipsCodePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(stateFipsCodeType, stateFipsCodeMapping, append(wl, stateFipsCodePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update state_fips_codes row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for state_fips_codes")
	}

	if !cached {
		stateFipsCodeUpdateCacheMut.Lock()
		stateFipsCodeUpdateCache[key] = cache
		stateFipsCodeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q stateFipsCodeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for state_fips_codes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for state_fips_codes")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o StateFipsCodeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), stateFipsCodePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"state_fips_codes\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, stateFipsCodePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in stateFipsCode slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all stateFipsCode")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *StateFipsCode) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no state_fips_codes provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(stateFipsCodeColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	stateFipsCodeUpsertCacheMut.RLock()
	cache, cached := stateFipsCodeUpsertCache[key]
	stateFipsCodeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			stateFipsCodeAllColumns,
			stateFipsCodeColumnsWithDefault,
			stateFipsCodeColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			stateFipsCodeAllColumns,
			stateFipsCodePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert state_fips_codes, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(stateFipsCodePrimaryKeyColumns))
			copy(conflict, stateFipsCodePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"state_fips_codes\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(stateFipsCodeType, stateFipsCodeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(stateFipsCodeType, stateFipsCodeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert state_fips_codes")
	}

	if !cached {
		stateFipsCodeUpsertCacheMut.Lock()
		stateFipsCodeUpsertCache[key] = cache
		stateFipsCodeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single StateFipsCode record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *StateFipsCode) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no StateFipsCode provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), stateFipsCodePrimaryKeyMapping)
	sql := "DELETE FROM \"state_fips_codes\" WHERE \"code\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from state_fips_codes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for state_fips_codes")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q stateFipsCodeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no stateFipsCodeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from state_fips_codes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for state_fips_codes")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o StateFipsCodeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(stateFipsCodeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), stateFipsCodePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"state_fips_codes\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, stateFipsCodePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from stateFipsCode slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for state_fips_codes")
	}

	if len(stateFipsCodeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *StateFipsCode) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindStateFipsCode(ctx, exec, o.Code)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *StateFipsCodeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := StateFipsCodeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), stateFipsCodePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"state_fips_codes\".* FROM \"state_fips_codes\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, stateFipsCodePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in StateFipsCodeSlice")
	}

	*o = slice

	return nil
}

// StateFipsCodeExists checks if the StateFipsCode row exists.
func StateFipsCodeExists(ctx context.Context, exec boil.ContextExecutor, code string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"state_fips_codes\" where \"code\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, code)
	}
	row := exec.QueryRowContext(ctx, sql, code)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if state_fips_codes exists")
	}

	return exists, nil
}
