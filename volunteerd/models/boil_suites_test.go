// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("CongressionalDistricts", testCongressionalDistricts)
	t.Run("SchemaMigrations", testSchemaMigrations)
	t.Run("StateFipsCodes", testStateFipsCodes)
	t.Run("States", testStates)
	t.Run("UsCounties", testUsCounties)
	t.Run("ZipCodes", testZipCodes)
}

func TestDelete(t *testing.T) {
	t.Run("CongressionalDistricts", testCongressionalDistrictsDelete)
	t.Run("SchemaMigrations", testSchemaMigrationsDelete)
	t.Run("StateFipsCodes", testStateFipsCodesDelete)
	t.Run("States", testStatesDelete)
	t.Run("UsCounties", testUsCountiesDelete)
	t.Run("ZipCodes", testZipCodesDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("CongressionalDistricts", testCongressionalDistrictsQueryDeleteAll)
	t.Run("SchemaMigrations", testSchemaMigrationsQueryDeleteAll)
	t.Run("StateFipsCodes", testStateFipsCodesQueryDeleteAll)
	t.Run("States", testStatesQueryDeleteAll)
	t.Run("UsCounties", testUsCountiesQueryDeleteAll)
	t.Run("ZipCodes", testZipCodesQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("CongressionalDistricts", testCongressionalDistrictsSliceDeleteAll)
	t.Run("SchemaMigrations", testSchemaMigrationsSliceDeleteAll)
	t.Run("StateFipsCodes", testStateFipsCodesSliceDeleteAll)
	t.Run("States", testStatesSliceDeleteAll)
	t.Run("UsCounties", testUsCountiesSliceDeleteAll)
	t.Run("ZipCodes", testZipCodesSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("CongressionalDistricts", testCongressionalDistrictsExists)
	t.Run("SchemaMigrations", testSchemaMigrationsExists)
	t.Run("StateFipsCodes", testStateFipsCodesExists)
	t.Run("States", testStatesExists)
	t.Run("UsCounties", testUsCountiesExists)
	t.Run("ZipCodes", testZipCodesExists)
}

func TestFind(t *testing.T) {
	t.Run("CongressionalDistricts", testCongressionalDistrictsFind)
	t.Run("SchemaMigrations", testSchemaMigrationsFind)
	t.Run("StateFipsCodes", testStateFipsCodesFind)
	t.Run("States", testStatesFind)
	t.Run("UsCounties", testUsCountiesFind)
	t.Run("ZipCodes", testZipCodesFind)
}

func TestBind(t *testing.T) {
	t.Run("CongressionalDistricts", testCongressionalDistrictsBind)
	t.Run("SchemaMigrations", testSchemaMigrationsBind)
	t.Run("StateFipsCodes", testStateFipsCodesBind)
	t.Run("States", testStatesBind)
	t.Run("UsCounties", testUsCountiesBind)
	t.Run("ZipCodes", testZipCodesBind)
}

func TestOne(t *testing.T) {
	t.Run("CongressionalDistricts", testCongressionalDistrictsOne)
	t.Run("SchemaMigrations", testSchemaMigrationsOne)
	t.Run("StateFipsCodes", testStateFipsCodesOne)
	t.Run("States", testStatesOne)
	t.Run("UsCounties", testUsCountiesOne)
	t.Run("ZipCodes", testZipCodesOne)
}

func TestAll(t *testing.T) {
	t.Run("CongressionalDistricts", testCongressionalDistrictsAll)
	t.Run("SchemaMigrations", testSchemaMigrationsAll)
	t.Run("StateFipsCodes", testStateFipsCodesAll)
	t.Run("States", testStatesAll)
	t.Run("UsCounties", testUsCountiesAll)
	t.Run("ZipCodes", testZipCodesAll)
}

func TestCount(t *testing.T) {
	t.Run("CongressionalDistricts", testCongressionalDistrictsCount)
	t.Run("SchemaMigrations", testSchemaMigrationsCount)
	t.Run("StateFipsCodes", testStateFipsCodesCount)
	t.Run("States", testStatesCount)
	t.Run("UsCounties", testUsCountiesCount)
	t.Run("ZipCodes", testZipCodesCount)
}

func TestHooks(t *testing.T) {
	t.Run("CongressionalDistricts", testCongressionalDistrictsHooks)
	t.Run("SchemaMigrations", testSchemaMigrationsHooks)
	t.Run("StateFipsCodes", testStateFipsCodesHooks)
	t.Run("States", testStatesHooks)
	t.Run("UsCounties", testUsCountiesHooks)
	t.Run("ZipCodes", testZipCodesHooks)
}

func TestInsert(t *testing.T) {
	t.Run("CongressionalDistricts", testCongressionalDistrictsInsert)
	t.Run("CongressionalDistricts", testCongressionalDistrictsInsertWhitelist)
	t.Run("SchemaMigrations", testSchemaMigrationsInsert)
	t.Run("SchemaMigrations", testSchemaMigrationsInsertWhitelist)
	t.Run("StateFipsCodes", testStateFipsCodesInsert)
	t.Run("StateFipsCodes", testStateFipsCodesInsertWhitelist)
	t.Run("States", testStatesInsert)
	t.Run("States", testStatesInsertWhitelist)
	t.Run("UsCounties", testUsCountiesInsert)
	t.Run("UsCounties", testUsCountiesInsertWhitelist)
	t.Run("ZipCodes", testZipCodesInsert)
	t.Run("ZipCodes", testZipCodesInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("CongressionalDistrictToStateUsingStatefp", testCongressionalDistrictToOneStateUsingStatefp)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("StateToStatefpCongressionalDistricts", testStateToManyStatefpCongressionalDistricts)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("CongressionalDistrictToStateUsingStatefpCongressionalDistricts", testCongressionalDistrictToOneSetOpStateUsingStatefp)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {
	t.Run("CongressionalDistrictToStateUsingStatefpCongressionalDistricts", testCongressionalDistrictToOneRemoveOpStateUsingStatefp)
}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("StateToStatefpCongressionalDistricts", testStateToManyAddOpStatefpCongressionalDistricts)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {
	t.Run("StateToStatefpCongressionalDistricts", testStateToManySetOpStatefpCongressionalDistricts)
}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {
	t.Run("StateToStatefpCongressionalDistricts", testStateToManyRemoveOpStatefpCongressionalDistricts)
}

func TestReload(t *testing.T) {
	t.Run("CongressionalDistricts", testCongressionalDistrictsReload)
	t.Run("SchemaMigrations", testSchemaMigrationsReload)
	t.Run("StateFipsCodes", testStateFipsCodesReload)
	t.Run("States", testStatesReload)
	t.Run("UsCounties", testUsCountiesReload)
	t.Run("ZipCodes", testZipCodesReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("CongressionalDistricts", testCongressionalDistrictsReloadAll)
	t.Run("SchemaMigrations", testSchemaMigrationsReloadAll)
	t.Run("StateFipsCodes", testStateFipsCodesReloadAll)
	t.Run("States", testStatesReloadAll)
	t.Run("UsCounties", testUsCountiesReloadAll)
	t.Run("ZipCodes", testZipCodesReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("CongressionalDistricts", testCongressionalDistrictsSelect)
	t.Run("SchemaMigrations", testSchemaMigrationsSelect)
	t.Run("StateFipsCodes", testStateFipsCodesSelect)
	t.Run("States", testStatesSelect)
	t.Run("UsCounties", testUsCountiesSelect)
	t.Run("ZipCodes", testZipCodesSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("CongressionalDistricts", testCongressionalDistrictsUpdate)
	t.Run("SchemaMigrations", testSchemaMigrationsUpdate)
	t.Run("StateFipsCodes", testStateFipsCodesUpdate)
	t.Run("States", testStatesUpdate)
	t.Run("UsCounties", testUsCountiesUpdate)
	t.Run("ZipCodes", testZipCodesUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("CongressionalDistricts", testCongressionalDistrictsSliceUpdateAll)
	t.Run("SchemaMigrations", testSchemaMigrationsSliceUpdateAll)
	t.Run("StateFipsCodes", testStateFipsCodesSliceUpdateAll)
	t.Run("States", testStatesSliceUpdateAll)
	t.Run("UsCounties", testUsCountiesSliceUpdateAll)
	t.Run("ZipCodes", testZipCodesSliceUpdateAll)
}
