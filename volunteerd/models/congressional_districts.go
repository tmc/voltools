// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CongressionalDistrict is an object representing the database table.
type CongressionalDistrict struct {
	Gid      int          `boil:"gid" json:"gid" toml:"gid" yaml:"gid"`
	Statefp  null.String  `boil:"statefp" json:"statefp,omitempty" toml:"statefp" yaml:"statefp,omitempty"`
	CD116FP  null.String  `boil:"cd116fp" json:"cd116fp,omitempty" toml:"cd116fp" yaml:"cd116fp,omitempty"`
	Geoid    null.String  `boil:"geoid" json:"geoid,omitempty" toml:"geoid" yaml:"geoid,omitempty"`
	Name     null.String  `boil:"namelsad" json:"namelsad,omitempty" toml:"namelsad" yaml:"namelsad,omitempty"`
	Lsad     null.String  `boil:"lsad" json:"lsad,omitempty" toml:"lsad" yaml:"lsad,omitempty"`
	Cdsessn  null.String  `boil:"cdsessn" json:"cdsessn,omitempty" toml:"cdsessn" yaml:"cdsessn,omitempty"`
	MTFCC    null.String  `boil:"mtfcc" json:"mtfcc,omitempty" toml:"mtfcc" yaml:"mtfcc,omitempty"`
	Funcstat null.String  `boil:"funcstat" json:"funcstat,omitempty" toml:"funcstat" yaml:"funcstat,omitempty"`
	Aland    null.Float64 `boil:"aland" json:"aland,omitempty" toml:"aland" yaml:"aland,omitempty"`
	Awater   null.Float64 `boil:"awater" json:"awater,omitempty" toml:"awater" yaml:"awater,omitempty"`
	Intptlat null.String  `boil:"intptlat" json:"intptlat,omitempty" toml:"intptlat" yaml:"intptlat,omitempty"`
	Intptlon null.String  `boil:"intptlon" json:"intptlon,omitempty" toml:"intptlon" yaml:"intptlon,omitempty"`

	R *congressionalDistrictR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L congressionalDistrictL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CongressionalDistrictColumns = struct {
	Gid      string
	Statefp  string
	CD116FP  string
	Geoid    string
	Name     string
	Lsad     string
	Cdsessn  string
	MTFCC    string
	Funcstat string
	Aland    string
	Awater   string
	Intptlat string
	Intptlon string
}{
	Gid:      "gid",
	Statefp:  "statefp",
	CD116FP:  "cd116fp",
	Geoid:    "geoid",
	Name:     "namelsad",
	Lsad:     "lsad",
	Cdsessn:  "cdsessn",
	MTFCC:    "mtfcc",
	Funcstat: "funcstat",
	Aland:    "aland",
	Awater:   "awater",
	Intptlat: "intptlat",
	Intptlon: "intptlon",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpernull_Float64 struct{ field string }

func (w whereHelpernull_Float64) EQ(x null.Float64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Float64) NEQ(x null.Float64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Float64) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Float64) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Float64) LT(x null.Float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Float64) LTE(x null.Float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Float64) GT(x null.Float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Float64) GTE(x null.Float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var CongressionalDistrictWhere = struct {
	Gid      whereHelperint
	Statefp  whereHelpernull_String
	CD116FP  whereHelpernull_String
	Geoid    whereHelpernull_String
	Name     whereHelpernull_String
	Lsad     whereHelpernull_String
	Cdsessn  whereHelpernull_String
	MTFCC    whereHelpernull_String
	Funcstat whereHelpernull_String
	Aland    whereHelpernull_Float64
	Awater   whereHelpernull_Float64
	Intptlat whereHelpernull_String
	Intptlon whereHelpernull_String
}{
	Gid:      whereHelperint{field: "\"congressional_districts\".\"gid\""},
	Statefp:  whereHelpernull_String{field: "\"congressional_districts\".\"statefp\""},
	CD116FP:  whereHelpernull_String{field: "\"congressional_districts\".\"cd116fp\""},
	Geoid:    whereHelpernull_String{field: "\"congressional_districts\".\"geoid\""},
	Name:     whereHelpernull_String{field: "\"congressional_districts\".\"namelsad\""},
	Lsad:     whereHelpernull_String{field: "\"congressional_districts\".\"lsad\""},
	Cdsessn:  whereHelpernull_String{field: "\"congressional_districts\".\"cdsessn\""},
	MTFCC:    whereHelpernull_String{field: "\"congressional_districts\".\"mtfcc\""},
	Funcstat: whereHelpernull_String{field: "\"congressional_districts\".\"funcstat\""},
	Aland:    whereHelpernull_Float64{field: "\"congressional_districts\".\"aland\""},
	Awater:   whereHelpernull_Float64{field: "\"congressional_districts\".\"awater\""},
	Intptlat: whereHelpernull_String{field: "\"congressional_districts\".\"intptlat\""},
	Intptlon: whereHelpernull_String{field: "\"congressional_districts\".\"intptlon\""},
}

// CongressionalDistrictRels is where relationship names are stored.
var CongressionalDistrictRels = struct {
}{}

// congressionalDistrictR is where relationships are stored.
type congressionalDistrictR struct {
}

// NewStruct creates a new relationship struct
func (*congressionalDistrictR) NewStruct() *congressionalDistrictR {
	return &congressionalDistrictR{}
}

// congressionalDistrictL is where Load methods for each relationship are stored.
type congressionalDistrictL struct{}

var (
	congressionalDistrictAllColumns            = []string{"gid", "statefp", "cd116fp", "geoid", "namelsad", "lsad", "cdsessn", "mtfcc", "funcstat", "aland", "awater", "intptlat", "intptlon"}
	congressionalDistrictColumnsWithoutDefault = []string{"statefp", "cd116fp", "geoid", "namelsad", "lsad", "cdsessn", "mtfcc", "funcstat", "aland", "awater", "intptlat", "intptlon"}
	congressionalDistrictColumnsWithDefault    = []string{"gid"}
	congressionalDistrictPrimaryKeyColumns     = []string{"gid"}
)

type (
	// CongressionalDistrictSlice is an alias for a slice of pointers to CongressionalDistrict.
	// This should generally be used opposed to []CongressionalDistrict.
	CongressionalDistrictSlice []*CongressionalDistrict
	// CongressionalDistrictHook is the signature for custom CongressionalDistrict hook methods
	CongressionalDistrictHook func(context.Context, boil.ContextExecutor, *CongressionalDistrict) error

	congressionalDistrictQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	congressionalDistrictType                 = reflect.TypeOf(&CongressionalDistrict{})
	congressionalDistrictMapping              = queries.MakeStructMapping(congressionalDistrictType)
	congressionalDistrictPrimaryKeyMapping, _ = queries.BindMapping(congressionalDistrictType, congressionalDistrictMapping, congressionalDistrictPrimaryKeyColumns)
	congressionalDistrictInsertCacheMut       sync.RWMutex
	congressionalDistrictInsertCache          = make(map[string]insertCache)
	congressionalDistrictUpdateCacheMut       sync.RWMutex
	congressionalDistrictUpdateCache          = make(map[string]updateCache)
	congressionalDistrictUpsertCacheMut       sync.RWMutex
	congressionalDistrictUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var congressionalDistrictBeforeInsertHooks []CongressionalDistrictHook
var congressionalDistrictBeforeUpdateHooks []CongressionalDistrictHook
var congressionalDistrictBeforeDeleteHooks []CongressionalDistrictHook
var congressionalDistrictBeforeUpsertHooks []CongressionalDistrictHook

var congressionalDistrictAfterInsertHooks []CongressionalDistrictHook
var congressionalDistrictAfterSelectHooks []CongressionalDistrictHook
var congressionalDistrictAfterUpdateHooks []CongressionalDistrictHook
var congressionalDistrictAfterDeleteHooks []CongressionalDistrictHook
var congressionalDistrictAfterUpsertHooks []CongressionalDistrictHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CongressionalDistrict) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range congressionalDistrictBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CongressionalDistrict) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range congressionalDistrictBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CongressionalDistrict) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range congressionalDistrictBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CongressionalDistrict) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range congressionalDistrictBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CongressionalDistrict) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range congressionalDistrictAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CongressionalDistrict) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range congressionalDistrictAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CongressionalDistrict) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range congressionalDistrictAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CongressionalDistrict) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range congressionalDistrictAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CongressionalDistrict) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range congressionalDistrictAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCongressionalDistrictHook registers your hook function for all future operations.
func AddCongressionalDistrictHook(hookPoint boil.HookPoint, congressionalDistrictHook CongressionalDistrictHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		congressionalDistrictBeforeInsertHooks = append(congressionalDistrictBeforeInsertHooks, congressionalDistrictHook)
	case boil.BeforeUpdateHook:
		congressionalDistrictBeforeUpdateHooks = append(congressionalDistrictBeforeUpdateHooks, congressionalDistrictHook)
	case boil.BeforeDeleteHook:
		congressionalDistrictBeforeDeleteHooks = append(congressionalDistrictBeforeDeleteHooks, congressionalDistrictHook)
	case boil.BeforeUpsertHook:
		congressionalDistrictBeforeUpsertHooks = append(congressionalDistrictBeforeUpsertHooks, congressionalDistrictHook)
	case boil.AfterInsertHook:
		congressionalDistrictAfterInsertHooks = append(congressionalDistrictAfterInsertHooks, congressionalDistrictHook)
	case boil.AfterSelectHook:
		congressionalDistrictAfterSelectHooks = append(congressionalDistrictAfterSelectHooks, congressionalDistrictHook)
	case boil.AfterUpdateHook:
		congressionalDistrictAfterUpdateHooks = append(congressionalDistrictAfterUpdateHooks, congressionalDistrictHook)
	case boil.AfterDeleteHook:
		congressionalDistrictAfterDeleteHooks = append(congressionalDistrictAfterDeleteHooks, congressionalDistrictHook)
	case boil.AfterUpsertHook:
		congressionalDistrictAfterUpsertHooks = append(congressionalDistrictAfterUpsertHooks, congressionalDistrictHook)
	}
}

// One returns a single congressionalDistrict record from the query.
func (q congressionalDistrictQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CongressionalDistrict, error) {
	o := &CongressionalDistrict{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for congressional_districts")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all CongressionalDistrict records from the query.
func (q congressionalDistrictQuery) All(ctx context.Context, exec boil.ContextExecutor) (CongressionalDistrictSlice, error) {
	var o []*CongressionalDistrict

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CongressionalDistrict slice")
	}

	if len(congressionalDistrictAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all CongressionalDistrict records in the query.
func (q congressionalDistrictQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count congressional_districts rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q congressionalDistrictQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if congressional_districts exists")
	}

	return count > 0, nil
}

// CongressionalDistricts retrieves all the records using an executor.
func CongressionalDistricts(mods ...qm.QueryMod) congressionalDistrictQuery {
	mods = append(mods, qm.From("\"congressional_districts\""))
	return congressionalDistrictQuery{NewQuery(mods...)}
}

// FindCongressionalDistrict retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCongressionalDistrict(ctx context.Context, exec boil.ContextExecutor, gid int, selectCols ...string) (*CongressionalDistrict, error) {
	congressionalDistrictObj := &CongressionalDistrict{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"congressional_districts\" where \"gid\"=$1", sel,
	)

	q := queries.Raw(query, gid)

	err := q.Bind(ctx, exec, congressionalDistrictObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from congressional_districts")
	}

	return congressionalDistrictObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CongressionalDistrict) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no congressional_districts provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(congressionalDistrictColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	congressionalDistrictInsertCacheMut.RLock()
	cache, cached := congressionalDistrictInsertCache[key]
	congressionalDistrictInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			congressionalDistrictAllColumns,
			congressionalDistrictColumnsWithDefault,
			congressionalDistrictColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(congressionalDistrictType, congressionalDistrictMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(congressionalDistrictType, congressionalDistrictMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"congressional_districts\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"congressional_districts\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into congressional_districts")
	}

	if !cached {
		congressionalDistrictInsertCacheMut.Lock()
		congressionalDistrictInsertCache[key] = cache
		congressionalDistrictInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the CongressionalDistrict.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CongressionalDistrict) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	congressionalDistrictUpdateCacheMut.RLock()
	cache, cached := congressionalDistrictUpdateCache[key]
	congressionalDistrictUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			congressionalDistrictAllColumns,
			congressionalDistrictPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update congressional_districts, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"congressional_districts\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, congressionalDistrictPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(congressionalDistrictType, congressionalDistrictMapping, append(wl, congressionalDistrictPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update congressional_districts row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for congressional_districts")
	}

	if !cached {
		congressionalDistrictUpdateCacheMut.Lock()
		congressionalDistrictUpdateCache[key] = cache
		congressionalDistrictUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q congressionalDistrictQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for congressional_districts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for congressional_districts")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CongressionalDistrictSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), congressionalDistrictPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"congressional_districts\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, congressionalDistrictPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in congressionalDistrict slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all congressionalDistrict")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CongressionalDistrict) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no congressional_districts provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(congressionalDistrictColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	congressionalDistrictUpsertCacheMut.RLock()
	cache, cached := congressionalDistrictUpsertCache[key]
	congressionalDistrictUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			congressionalDistrictAllColumns,
			congressionalDistrictColumnsWithDefault,
			congressionalDistrictColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			congressionalDistrictAllColumns,
			congressionalDistrictPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert congressional_districts, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(congressionalDistrictPrimaryKeyColumns))
			copy(conflict, congressionalDistrictPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"congressional_districts\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(congressionalDistrictType, congressionalDistrictMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(congressionalDistrictType, congressionalDistrictMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert congressional_districts")
	}

	if !cached {
		congressionalDistrictUpsertCacheMut.Lock()
		congressionalDistrictUpsertCache[key] = cache
		congressionalDistrictUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single CongressionalDistrict record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CongressionalDistrict) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CongressionalDistrict provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), congressionalDistrictPrimaryKeyMapping)
	sql := "DELETE FROM \"congressional_districts\" WHERE \"gid\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from congressional_districts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for congressional_districts")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q congressionalDistrictQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no congressionalDistrictQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from congressional_districts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for congressional_districts")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CongressionalDistrictSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(congressionalDistrictBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), congressionalDistrictPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"congressional_districts\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, congressionalDistrictPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from congressionalDistrict slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for congressional_districts")
	}

	if len(congressionalDistrictAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CongressionalDistrict) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCongressionalDistrict(ctx, exec, o.Gid)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CongressionalDistrictSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CongressionalDistrictSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), congressionalDistrictPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"congressional_districts\".* FROM \"congressional_districts\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, congressionalDistrictPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CongressionalDistrictSlice")
	}

	*o = slice

	return nil
}

// CongressionalDistrictExists checks if the CongressionalDistrict row exists.
func CongressionalDistrictExists(ctx context.Context, exec boil.ContextExecutor, gid int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"congressional_districts\" where \"gid\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, gid)
	}
	row := exec.QueryRowContext(ctx, sql, gid)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if congressional_districts exists")
	}

	return exists, nil
}
