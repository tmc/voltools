// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testZipCodes(t *testing.T) {
	t.Parallel()

	query := ZipCodes()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testZipCodesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ZipCode{}
	if err = randomize.Struct(seed, o, zipCodeDBTypes, true, zipCodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ZipCode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ZipCodes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testZipCodesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ZipCode{}
	if err = randomize.Struct(seed, o, zipCodeDBTypes, true, zipCodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ZipCode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := ZipCodes().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ZipCodes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testZipCodesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ZipCode{}
	if err = randomize.Struct(seed, o, zipCodeDBTypes, true, zipCodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ZipCode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ZipCodeSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ZipCodes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testZipCodesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ZipCode{}
	if err = randomize.Struct(seed, o, zipCodeDBTypes, true, zipCodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ZipCode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ZipCodeExists(ctx, tx, o.Geoid10)
	if err != nil {
		t.Errorf("Unable to check if ZipCode exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ZipCodeExists to return true, but got false.")
	}
}

func testZipCodesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ZipCode{}
	if err = randomize.Struct(seed, o, zipCodeDBTypes, true, zipCodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ZipCode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	zipCodeFound, err := FindZipCode(ctx, tx, o.Geoid10)
	if err != nil {
		t.Error(err)
	}

	if zipCodeFound == nil {
		t.Error("want a record, got nil")
	}
}

func testZipCodesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ZipCode{}
	if err = randomize.Struct(seed, o, zipCodeDBTypes, true, zipCodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ZipCode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = ZipCodes().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testZipCodesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ZipCode{}
	if err = randomize.Struct(seed, o, zipCodeDBTypes, true, zipCodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ZipCode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := ZipCodes().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testZipCodesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	zipCodeOne := &ZipCode{}
	zipCodeTwo := &ZipCode{}
	if err = randomize.Struct(seed, zipCodeOne, zipCodeDBTypes, false, zipCodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ZipCode struct: %s", err)
	}
	if err = randomize.Struct(seed, zipCodeTwo, zipCodeDBTypes, false, zipCodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ZipCode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = zipCodeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = zipCodeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ZipCodes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testZipCodesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	zipCodeOne := &ZipCode{}
	zipCodeTwo := &ZipCode{}
	if err = randomize.Struct(seed, zipCodeOne, zipCodeDBTypes, false, zipCodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ZipCode struct: %s", err)
	}
	if err = randomize.Struct(seed, zipCodeTwo, zipCodeDBTypes, false, zipCodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ZipCode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = zipCodeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = zipCodeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ZipCodes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func zipCodeBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *ZipCode) error {
	*o = ZipCode{}
	return nil
}

func zipCodeAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *ZipCode) error {
	*o = ZipCode{}
	return nil
}

func zipCodeAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *ZipCode) error {
	*o = ZipCode{}
	return nil
}

func zipCodeBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ZipCode) error {
	*o = ZipCode{}
	return nil
}

func zipCodeAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ZipCode) error {
	*o = ZipCode{}
	return nil
}

func zipCodeBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ZipCode) error {
	*o = ZipCode{}
	return nil
}

func zipCodeAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ZipCode) error {
	*o = ZipCode{}
	return nil
}

func zipCodeBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ZipCode) error {
	*o = ZipCode{}
	return nil
}

func zipCodeAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ZipCode) error {
	*o = ZipCode{}
	return nil
}

func testZipCodesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &ZipCode{}
	o := &ZipCode{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, zipCodeDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ZipCode object: %s", err)
	}

	AddZipCodeHook(boil.BeforeInsertHook, zipCodeBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	zipCodeBeforeInsertHooks = []ZipCodeHook{}

	AddZipCodeHook(boil.AfterInsertHook, zipCodeAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	zipCodeAfterInsertHooks = []ZipCodeHook{}

	AddZipCodeHook(boil.AfterSelectHook, zipCodeAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	zipCodeAfterSelectHooks = []ZipCodeHook{}

	AddZipCodeHook(boil.BeforeUpdateHook, zipCodeBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	zipCodeBeforeUpdateHooks = []ZipCodeHook{}

	AddZipCodeHook(boil.AfterUpdateHook, zipCodeAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	zipCodeAfterUpdateHooks = []ZipCodeHook{}

	AddZipCodeHook(boil.BeforeDeleteHook, zipCodeBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	zipCodeBeforeDeleteHooks = []ZipCodeHook{}

	AddZipCodeHook(boil.AfterDeleteHook, zipCodeAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	zipCodeAfterDeleteHooks = []ZipCodeHook{}

	AddZipCodeHook(boil.BeforeUpsertHook, zipCodeBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	zipCodeBeforeUpsertHooks = []ZipCodeHook{}

	AddZipCodeHook(boil.AfterUpsertHook, zipCodeAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	zipCodeAfterUpsertHooks = []ZipCodeHook{}
}

func testZipCodesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ZipCode{}
	if err = randomize.Struct(seed, o, zipCodeDBTypes, true, zipCodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ZipCode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ZipCodes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testZipCodesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ZipCode{}
	if err = randomize.Struct(seed, o, zipCodeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ZipCode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(zipCodeColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := ZipCodes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testZipCodesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ZipCode{}
	if err = randomize.Struct(seed, o, zipCodeDBTypes, true, zipCodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ZipCode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testZipCodesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ZipCode{}
	if err = randomize.Struct(seed, o, zipCodeDBTypes, true, zipCodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ZipCode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ZipCodeSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testZipCodesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ZipCode{}
	if err = randomize.Struct(seed, o, zipCodeDBTypes, true, zipCodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ZipCode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ZipCodes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	zipCodeDBTypes = map[string]string{`Gid`: `integer`, `ZipCode`: `character varying`, `Geoid10`: `character varying`, `Classfp10`: `character varying`, `MTFCC10`: `character varying`, `Funcstat10`: `character varying`, `Aland10`: `double precision`, `Awater10`: `double precision`, `Intptlat10`: `character varying`, `Intptlon10`: `character varying`}
	_              = bytes.MinRead
)

func testZipCodesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(zipCodePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(zipCodeAllColumns) == len(zipCodePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ZipCode{}
	if err = randomize.Struct(seed, o, zipCodeDBTypes, true, zipCodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ZipCode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ZipCodes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, zipCodeDBTypes, true, zipCodePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ZipCode struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testZipCodesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(zipCodeAllColumns) == len(zipCodePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ZipCode{}
	if err = randomize.Struct(seed, o, zipCodeDBTypes, true, zipCodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ZipCode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ZipCodes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, zipCodeDBTypes, true, zipCodePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ZipCode struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(zipCodeAllColumns, zipCodePrimaryKeyColumns) {
		fields = zipCodeAllColumns
	} else {
		fields = strmangle.SetComplement(
			zipCodeAllColumns,
			zipCodePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ZipCodeSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testZipCodesUpsert(t *testing.T) {
	t.Parallel()

	if len(zipCodeAllColumns) == len(zipCodePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := ZipCode{}
	if err = randomize.Struct(seed, &o, zipCodeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ZipCode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ZipCode: %s", err)
	}

	count, err := ZipCodes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, zipCodeDBTypes, false, zipCodePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ZipCode struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ZipCode: %s", err)
	}

	count, err = ZipCodes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
